import mixBorder from '../core/mixin/border';
import mixSpaceMargin from '../core/mixin/space-margin';
import mixSpacePadding from '../core/mixin/space-padding';
import mixSize from '../core/mixin/size';
import mixElevation from '../core/mixin/elevation';
declare const MView_base: import("vue-class-component/lib/declarations").VueClass<mixBorder & mixSpaceMargin & mixSpacePadding & mixSize & mixElevation>;
export default class MView extends MView_base {
    name: string;
    scrollKeep: boolean;
    onRefresh?: () => {};
    onLoadMore?: () => {};
    onScroll(params: [Event, number, boolean, boolean, '↕' | '↓' | '↑']): void;
    readonly classes: {};
    readonly styles: {
        margin?: string | number | undefined;
        marginX?: string | number | undefined;
        marginY?: string | number | undefined;
        marginTop?: string | number | undefined;
        marginBottom?: string | number | undefined;
        marginLeft?: string | number | undefined;
        marginRight?: string | number | undefined;
        size?: string | number | undefined;
        height?: string | number | undefined;
        width?: string | number | undefined;
        border?: string | undefined;
        borderLeft?: string | undefined;
        borderRight?: string | undefined;
        borderTop?: string | undefined;
        borderBottom?: string | undefined;
    };
    readonly scrollerStyles: {
        padding?: string | number | undefined;
        paddingX?: string | number | undefined;
        paddingY?: string | number | undefined;
        paddingTop?: string | number | undefined;
        paddingBottom?: string | number | undefined;
        paddingLeft?: string | number | undefined;
        paddingRight?: string | number | undefined;
    };
    private enableWatchScroll;
    private enableLoadMore;
    private enableRefresh;
    private pending;
    private isStart;
    private isEnd;
    private lastScrollVal;
    private scrollKeepVal;
    handleScroll(e: Event): void;
    refresh(): void;
    loadMore(): void;
    scrollTo(target: any): void;
    mounted(): void;
    activated(): void;
    deactivated(): void;
    beforeDestroy(): void;
    render(): JSX.Element;
}
export {};
